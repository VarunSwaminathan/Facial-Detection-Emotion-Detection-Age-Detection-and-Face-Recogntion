# -*- coding: utf-8 -*-
"""gender.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bPulFkMxtUCodtToKclh4J_XESrmpnF8
"""

import pandas as pd
import cv2 as cv
import numpy as np
import tensorflow as tf

from google.colab import files
uploaded = files.upload()
image = cv.imread('count_faces.jpg')

from google.colab import files
uploaded = files.upload()
model = cv.dnn.readNetFromCaffe('deploy_gender.prototxt', 'gender_net.caffemodel')

face_detector = cv.CascadeClassifier(cv.data.haarcascades + "haarcascade_frontalface_default.xml")

gray_image = cv.cvtColor(image, cv.COLOR_BGR2GRAY)
faces = face_detector.detectMultiScale(image, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

for (x, y, w, h) in faces:
    # Extract the face ROI (Region of Interest) from the input image
    face_roi = image[y:y+h, x:x+w]
    
    # Prepare the face ROI for input to the gender classification model
    blob = cv.dnn.blobFromImage(face_roi, scalefactor=1.0, size=(227, 227), mean=(78.4263377603, 87.7689143744, 114.895847746), swapRB=False)
    
    # Pass the face ROI through the gender classification model to get the predicted gender label
    model.setInput(blob)
    gender_preds = model.forward()
    gender_label = "Male" if gender_preds[0][0] > gender_preds[0][1] else "Female"
    
    # Draw a green rectangle around the face on the input image
    cv.rectangle(image, (x, y), (x+w, y+h), (0, 255, 0), 2)
    
    # Display the gender label near the face on the input image
    cv.putText(image, gender_label, (x, y - 10), cv.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

from google.colab.patches import cv2_imshow
cv2_imshow(image)
cv.waitKey(0)
cv.destroyAllWindows()

